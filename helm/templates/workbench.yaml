---
apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  annotations:
    notebooks.opendatahub.io/inject-oauth: 'true'
    opendatahub.io/image-display-name: AnythingLLM
    opendatahub.io/accelerator-name: ''
    openshift.io/description: ''
    openshift.io/display-name: AnythingLLM
    notebooks.opendatahub.io/last-image-selection: '{{ .Release.Namespace }}/custom-anythingllm:1.8.5'
    notebooks.opendatahub.io/last-size-selection: Small
    opendatahub.io/username: quickstart@redhat.com
  name: anythingllm
  labels:
    app: anythingllm
    opendatahub.io/dashboard: 'true'
    opendatahub.io/odh-managed: 'true'
spec:
  template:
    spec:
      affinity: {}
      containers:
        - resources:
            limits:
              cpu: '2'
              memory: 8Gi
            requests:
              cpu: '1'
              memory: 8Gi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/{{ .Release.Namespace }}/anythingllm/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: anythingllm
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /notebook/{{ .Release.Namespace }}/anythingllm/api
              port: notebook-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NOTEBOOK_ARGS
              value: |-
                --ServerApp.port=8888
                                  --ServerApp.token=''
                                  --ServerApp.password=''
                                  --ServerApp.base_url=/notebook/{{ .Release.Namespace }}/anythingllm
                                  --ServerApp.quit_button=False
                                  
            - name: JUPYTER_IMAGE
              value: "{{ .Values.images.anythingllm.repository }}:{{ .Values.images.anythingllm.tag }}"
            - name: SSL_CERT_FILE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: PIPELINES_SSL_SA_CERTS
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: GIT_SSL_CAINFO
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: PIP_CERT
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
            - name: REQUESTS_CA_BUNDLE
              value: /etc/pki/tls/custom-certs/ca-bundle.crt
          ports:
            - containerPort: 8888
              name: notebook-port
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: anythingllm
            - mountPath: /dev/shm
              name: shm
            - mountPath: /etc/pki/tls/custom-certs/ca-bundle.crt
              name: trusted-ca
              readOnly: true
              subPath: ca-bundle.crt
          envFrom:
            - secretRef:
                name: tinyllama-vllm-cpu
          image: "{{ .Values.images.anythingllm.repository }}:{{ .Values.images.anythingllm.tag }}"
          workingDir: /opt/app-root/src
        - resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 100m
              memory: 64Mi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: oauth-proxy
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 8443
              name: oauth-proxy
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /etc/oauth/config
              name: oauth-config
            - mountPath: /etc/tls/private
              name: tls-certificates
          image: 'registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4bef31eb993feb6f1096b51b4876c65a6fb1f4401fee97fa4f4542b6b7c9bc46'
          args:
            - '--provider=openshift'
            - '--https-address=:8443'
            - '--http-address='
            - '--openshift-service-account=anythingllm'
            - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
            - '--cookie-expire=24h0m0s'
            - '--tls-cert=/etc/tls/private/tls.crt'
            - '--tls-key=/etc/tls/private/tls.key'
            - '--upstream=http://localhost:8888'
            - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
            - '--email-domain=*'
            - '--skip-provider-button'
            - '--openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"anythingllm","namespace":"{{ .Release.Namespace }}"}'
        - name: anythingllm-automation
          image: keinos/sqlite3:latest
          command: ["/bin/sh", "-c"]
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: anythingllm
          args:
            - |
              set -e
              
              echo "=== AnythingLLM API Key Setup ==="
              echo "Looking for database..."
              
              # Use the known database location from our successful job
              DB_PATH="/opt/app-root/src/anythingllm/storage/anythingllm.db"
              
              # Wait for AnythingLLM to create the database
              echo "Waiting for database at: $DB_PATH"
              for i in $(seq 1 120); do
                if [ -f "$DB_PATH" ]; then
                  echo "Database found after ${i} seconds!"
                  break
                fi
                echo "Waiting for database... (${i}/120)"
                sleep 1
              done
              
              if [ ! -f "$DB_PATH" ]; then
                echo "❌ Database not found after waiting, checking what exists:"
                find /opt/app-root/src -name "*.db" -type f 2>/dev/null || echo "No .db files found"
                ls -la /opt/app-root/src/anythingllm/ 2>/dev/null || echo "Cannot list anythingllm directory"
                exit 1
              fi
              
              # Wait a bit for database to be fully initialized
              echo "Waiting for database to be ready..."
              sleep 5
              
              # Check if API key already exists
              if sqlite3 "$DB_PATH" "SELECT 1 FROM api_keys WHERE secret = 'sk-automation-workspace-setup' LIMIT 1;" 2>/dev/null | grep -q 1; then
                echo "✅ API key already exists"
              else
                echo "Adding API key to database..."
                
                sqlite3 "$DB_PATH" << 'EOF'
              -- Create API key table if it doesn't exist
              CREATE TABLE IF NOT EXISTS api_keys (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                secret TEXT UNIQUE NOT NULL,
                createdBy INTEGER,
                createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
                lastUpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
              );
              
              -- Insert API key
              INSERT OR REPLACE INTO api_keys (secret, createdBy, createdAt, lastUpdatedAt) 
              VALUES ('sk-automation-workspace-setup', 1, datetime('now'), datetime('now'));
              EOF
                
                echo "✅ API key added: sk-automation-workspace-setup"
              fi
              
              echo "=== API key setup complete! ==="
              
              # Keep the sidecar running (required for Kubernetes)
              echo "Keeping sidecar alive..."
              sleep infinity
            
      enableServiceLinks: false
      serviceAccountName: anythingllm
      volumes:
        - name: anythingllm
          persistentVolumeClaim:
            claimName: anythingllm
        - emptyDir:
            medium: Memory
          name: shm
        - configMap:
            items:
              - key: ca-bundle.crt
                path: ca-bundle.crt
            name: workbench-trusted-ca-bundle
            optional: true
          name: trusted-ca
        - name: oauth-config
          secret:
            defaultMode: 420
            secretName: anythingllm-oauth-config
        - name: tls-certificates
          secret:
            defaultMode: 420
            secretName: anythingllm-tls
